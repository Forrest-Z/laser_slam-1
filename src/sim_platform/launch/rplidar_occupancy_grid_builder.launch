<!--
This launch file is an example for 2D scan matching

It has been parametrized for the PR2 rosbag that can be downloaded at
wget http://pr.willowgarage.com/data/gmapping/small_loop_prf.bag
-->

<launch>
	<!--node name="mapper" type="mapper" pkg="ethzasl_icp_mapper" output="screen" >
		<remap from="scan" to="/scan" /-->
		<!--remap from="/icp_error_odom" to="/odom" /-->
		<!--remap from="cloud_in" to="/point_cloud" /-->
		<!--param name="subscribe_scan" value="true" />
		<param name="subscribe_cloud" value="false" />
		<param name="icpConfig" value="$(find ethzasl_icp_mapper)/launch/2D_scans/icp.yaml" />
		<param name="inputFiltersConfig" value="$(find ethzasl_icp_mapper)/launch/2D_scans/input_filters.yaml" />
		<param name="mapPostFiltersConfig" value="$(find ethzasl_icp_mapper)/launch/2D_scans/map_post_filters.yaml" />
		<param name="odom_frame" value="odom" />
		<param name="map_frame" value="map" />
		<param name="useROSLogger" value="false" />
		<param name="minOverlap" value="0.5" /> 
		<param name="maxOverlapToMerge" value="0.9" /> 
		<param name="minMapPointCount" value="1000" /> 
		<param name="minReadingPointCount" value="150" /> 
		<param name="localizing" value="true" /> 
		<param name="mapping" value="true" /--> 
		<!--param name="sensorFrame" value="laser_sensor_link" /> 
		<param name="fixedFrame " value="map" /--> 


	<!--/node-->
	<node name="dynamic_mapper" type="dynamic_mapper" pkg="ethzasl_icp_mapper" output="screen" >
		<param name="publishMapTf" value="true" /> 
		<param name="subscribe_scan" value="true" />
		<param name="subscribe_cloud" value="false" />
		<param name="useROSLogger" value="false" />
		<param name="icpConfig" value="$(find ethzasl_icp_mapper)/launch/2D_scans/icp.yaml" />
		<param name="inputFiltersConfig" value="$(find ethzasl_icp_mapper)/launch/2D_scans/input_filters.yaml" />
		<param name="mapPostFiltersConfig" value="$(find ethzasl_icp_mapper)/launch/2D_scans/map_post_filters.yaml" />
		<param name="odom_frame" value="odom" />
		<param name="map_frame" value="map" />
		<param name="maxAngle" value="0.02" />
		<param name="minOverlap" value="0.5" /> 
		<param name="maxOverlapToMerge" value="0.9" /> 
		<param name="minMapPointCount" value="1000" /> 
		<param name="minReadingPointCount" value="150" /> 
		<param name="localizing" value="true" /> 
		<param name="mapping" value="true" /> 
		<param name="inputQueueSize" value="10" /> 
		<param name="tfRefreshPeriod" value="0.01" /> 
		<param name="priorStatic" value="0.5" /> 
	</node>

<!--publishMapTf(getParam<bool>("publishMapTf", true)),
	useConstMotionModel(getParam<bool>("useConstMotionModel", false)),
	localizing(getParam<bool>("localizing", true)),
	mapping(getParam<bool>("mapping", true)),
	minReadingPointCount(getParam<int>("minReadingPointCount", 2000)),
	minMapPointCount(getParam<int>("minMapPointCount", 500)),
	 inputQueueSize(getParam<int>("inputQueueSize", 10)),
	minOverlap(getParam<double>("minOverlap", 0.5)),
	maxOverlapToMerge(getParam<double>("maxOverlapToMerge", 0.9)),
	//tfRefreshPeriod(getParam<double>("tfRefreshPeriod", 0.01)),
	odomFrame(getParam<string>("odom_frame", "odom")),
	mapFrame(getParam<string>("map_frame", "map")),
	//vtkFinalMapName(getParam<string>("vtkFinalMapName", "finalMap.vtk")),
	//mapElevation(getParam<double>("mapElevation", 0)),
	//priorStatic(getParam<double>("priorStatic", 0.5)),
	//priorDyn(getParam<double>("priorDyn", 0.5)),
	              maxAngle(getParam<double>("maxAngle", 0.02)),
	//eps_a(getParam<double>("eps_a", 0.05)),
	//eps_d(getParam<double>("eps_d", 0.02)),
	//alpha(getParam<double>("alpha", 0.99)),
	//beta(getParam<double>("beta", 0.99)),
	//maxDyn(getParam<double>("maxDyn", 0.95)),
	//maxDistNewPoint(pow(getParam<double>("maxDistNewPoint", 0.1),2)),-->
	<!--node name="static_transform_publisher" type="static_transform_publisher" pkg="tf" args="0 0 0 0 0 0 /map /odom 100 "/--> 
	<node name="occupancy_grid_builder" type="occupancy_grid_builder" pkg="ethzasl_icp_mapper" output="screen" >
		<param name="max_range" value="5.5" />
	</node>
	<!--node name="matcher_service" type="matcher_service" pkg="ethzasl_icp_mapper" output="screen" ></node>
	<node name="map_maintainer" type="map_maintainer" pkg="ethzasl_icp_mapper" output="screen" ></node>
	<node name="interact_mapper" type="interact_mapper" pkg="ethzasl_icp_mapper" output="screen" ></node>
	<node name="dynamic_mapper" type="dynamic_mapper" pkg="ethzasl_icp_mapper" output="screen" ></node>
	<node name="dynamic_trails" type="dynamic_trails" pkg="ethzasl_icp_mapper" output="screen" ></node-->
</launch>
